{"version":3,"sources":["webpack:///./src/components/HighLight/index.tsx"],"names":["memo","props","useState","unmatchVal","setUnmatchVal","val","tarVal","checkText","useCallback","_val","cacheUnmatch","index","indexOf","queryScope","length","head","slice","surplus","substr","push","useEffect","map","text","key","style","color","prevProps","nextProps"],"mappings":"igCA6DeA,0BA/C6B,SAAAC,GAAU,IAAD,IACfC,mBAAmB,IADJ,GAC5CC,EAD4C,KAChCC,EADgC,KAE3CC,EAAgBJ,EAAhBI,IAAKC,EAAWL,EAAXK,OAEPC,EAAYC,uBAChB,SAACC,EAAcC,GACb,IAAMC,EAAQF,EAAKG,QAAQN,GAE3B,GAAIK,EAAQ,IAAML,EAChBF,EAAc,GAAD,SAAKM,GAAL,CAAmBD,SADlC,CAIA,IAAMI,EAAaF,EAAQL,EAAOQ,OAC5BC,EAAON,EAAKO,MAAM,EAAGL,GACrBM,EAAUR,EAAKS,OAAOL,GAE5BH,EAAaS,KAAKJ,GAClBR,EAAUU,EAASP,MAErB,CAACJ,IAQH,OALAc,qBAAU,WAERb,EAAUF,EADmB,MAE5B,CAACC,EAAQD,EAAKE,IAGf,oCACGJ,EAAWW,OACVX,EAAWkB,KAAI,SAACC,EAAMX,GACpB,OACE,kBAAC,WAAD,CAAUY,IAAKZ,GACZW,GAAQ,8BAAOA,GACfX,IAAUR,EAAWW,OAAS,EAC7B,0BAAMU,MAAO,CAAEC,MAAO,YAAcnB,GAClC,SAKV,8BAAOD,OAhDC,SAACqB,EAA2BC,GAC1C,OAAID,EAAUrB,MAAQsB,EAAUtB,KAAOqB,EAAUpB,SAAWqB,EAAUrB","file":"static/js/src-components-HighLight.a7a686aa.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment, memo, useCallback } from 'react';\n\ninterface HighLightProps {\n  val: string; // 原始字段\n  tarVal: string; // 需要匹配高亮的字段\n}\n\nconst isEqual = (prevProps: HighLightProps, nextProps: HighLightProps) => {\n  if (prevProps.val !== nextProps.val || prevProps.tarVal !== nextProps.tarVal) {\n    return false;\n  }\n  return true;\n};\n\nconst HighLight: React.FC<HighLightProps> = props => {\n  const [unmatchVal, setUnmatchVal] = useState<string[]>([]);\n  const { val, tarVal } = props;\n\n  const checkText = useCallback(\n    (_val: string, cacheUnmatch: string[]) => {\n      const index = _val.indexOf(tarVal);\n\n      if (index < 0 || !tarVal) {\n        setUnmatchVal([...cacheUnmatch, _val]);\n        return;\n      }\n      const queryScope = index + tarVal.length;\n      const head = _val.slice(0, index);\n      const surplus = _val.substr(queryScope);\n\n      cacheUnmatch.push(head);\n      checkText(surplus, cacheUnmatch);\n    },\n    [tarVal]\n  );\n\n  useEffect(() => {\n    let cacheUnmatch: string[] = [];\n    checkText(val, cacheUnmatch);\n  }, [tarVal, val, checkText]);\n\n  return (\n    <>\n      {unmatchVal.length ? (\n        unmatchVal.map((text, index) => {\n          return (\n            <Fragment key={index}>\n              {text && <span>{text}</span>}\n              {index !== unmatchVal.length - 1 ? (\n                <span style={{ color: '#1e90ff' }}>{tarVal}</span>\n              ) : null}\n            </Fragment>\n          );\n        })\n      ) : (\n        <span>{val}</span>\n      )}\n    </>\n  );\n};\n\nexport default memo(HighLight, isEqual);\n"],"sourceRoot":""}